@using CI_Platform.Entities.Models
@{
    Layout = "Header";
}
@model Story





<body>
    <div class="container">
        <div id="Message" class="fs-5 fw-bold text-center"></div>
        <div style="color:red;" class="fs-5 fw-bold text-center">@TempData["Message"]</div>
        <br><br>
        <h1 style="font-weight: normal;">Share Your Story</h1>

        <!------------------------------------------------------------------  form for submit story  ------------------------------------------------------------------>
        <form method="post" id="storyform" enctype="multipart/form-data">

            <div class="form-group row mt-3">
                <div class="col-lg-4 col-sm-12">
                    <label for="username">Select Mission</label>
                    <select class="form-select" aria-label="Default select example" asp-for="MissionId" id="missionId" onchange="SavedDraft();">
                    <option selected disabled>Select Your Mission</option>
                    @foreach (var item in  @ViewBag.missionlist)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                
                </select>
                </div>
                <div class="col-lg-4 col-sm-12">
                    <label for="username">My Story Title</label>
                    <input type="text" class="form-control"  placeholder="Enter Story Title" id="title" onkeyup="submitbuttonremove();">
                </div>

                <div class="col-lg-4 col-sm-12">
                    <label for="date">Date</label>
                    <div class="input-group date">
                        <input type="date" id="date" class="form-control"  onchange="submitbuttonremove();" />
                    </div>
                </div>
            </div>

            <br>
            <label for="story">My Story</label>
            
            <textarea name="Description" id="editor" onkeyup="submitbuttonremove();"></textarea>
           
            <br>
            <label for="username">Enter Video URL</label>
            <textarea id="videoURL" class="form-control" placeholder="Enter Your URL" rows="2" onkeyup="submitbuttonremove();"></textarea>

            <br><br>

            <label for="photos">Upload your photos</label>
            <div class="container" id="dropzone" >
                <div class="picture-container ">
                    <div class="picture">
                        <img src="/images/drag-and-drop.png">
                        <input type="file" name="fileList" id="file-input"  multiple>
                    </div>
                </div>
            </div>
           
            <div id="preview-container"></div>
            <br><br>
            <div class="d-flex justify-content-between">
                <div>
                    <a asp-action="StoryListing" style="text-decoration:none;">
                        <button type="button" class="btnn cancle-btnn"> Cancle</button>
                    </a>
                </div>
                <div class="text-end">
                    <a id="previewBtn" style="text-decoration:none;">
                        <button type="button" id="previewbtn" class="mb-2 orangeButton d-none">Preview </button>
                    </a>
                    <button type="button" id="savebtn" class="mb-2 orangeButton" onclick="SaveStory();">Save </button>
                    <button type="submit" id="submit" class="orangeButton d-none" onclick="adding()">Submit </button>
                </div>
            </div>
        </form>
    </div>
        <!------------------------------------------------------------------ privacy policy  ------------------------------------------------------------------>
                       
                         @{

                            Html.RenderPartial("Footer");
                   
                         }




 
    <script src="//cdn.ckeditor.com/4.19.1/standard/ckeditor.js"></script>
    <script>
        // -------------------------------------   add media images on dropzone for user interface   ----------------------------------------------------------------//
        // Get the drop zone element
        const dropzone = document.getElementById('dropzone');
        let dropZoneFlag = true;
        // Handle drag over event
        dropzone.addEventListener('dragover', (event) => {
            event.preventDefault();
            dropzone.classList.add('dragging');
        });

        // Handle drag leave event
        dropzone.addEventListener('dragleave', () => {
            dropzone.classList.remove('dragging');
        });

        // Handle drop event
        dropzone.addEventListener('drop', (event) => {
            event.preventDefault();
            dropzone.classList.remove('dragging');
            if(dropZoneFlag == true){

            // Get the dropped files
            const files = event.dataTransfer.files;

            // Process the dropped files
            handleFiles(files);
            }
        });

        // Handle file input change event
        const fileInput = document.getElementById('file-input');
        fileInput.addEventListener('change', () => {
            // Get the selected files
            const files = fileInput.files;

            // Process the selected files
            handleFiles(files);
        });

        var fileNames = [];


        // Function to handle the dropped or selected files
        function handleFiles(files) {
            // Get the preview container element
            const previewContainer = document.getElementById('preview-container');

            // Iterate over the files and create a preview for each file
            for (const file of files) {
                const reader = new FileReader();
                reader.onload = () => {
                    // Create a preview element for the file
                    const preview = document.createElement('div');
                    preview.classList.add('preview');
                    if (file.type.startsWith('image/')) {
                        // If the file is an image, create an image element
                        const image = document.createElement('img');
                        image.src = reader.result;
                        preview.appendChild(image);
                    } else if (file.type.startsWith('video/')) {
                        // If the file is a video, create a video element
                        const video = document.createElement('video');
                        video.src = reader.result;
                        video.controls = true;
                        preview.appendChild(video);
                    }

                    // Create a close button for the preview

                    const closeButton = document.createElement('button');
                    closeButton.classList.add('cancel-btn');
                    closeButton.innerHTML = '&#x2716;';
                    closeButton.type = 'button';
                    closeButton.addEventListener('click', () => {
                        // Remove the preview element from the preview container
                        previewContainer.removeChild(preview);

                        // Remove the file name from the array
                        const index = fileNames.indexOf(file);
                        if (index > -1) {
                            fileNames.splice(index, 1);
                        }
                    });
                    preview.appendChild(closeButton);

                    // Append the preview element to the preview container
                    previewContainer.appendChild(preview);

                    // Add the file name to the array
                    fileNames.push(file);
                };
                reader.readAsDataURL(file);
                submitbuttonremove();
            }
        }
    
         // -------------------------------------   Getdata & Setdata of CKEditor   ----------------------------------------------------------------//
            // Custom Text Editor
            CKEDITOR.replace('editor');

             // Get the editor instance
            var editor = CKEDITOR.instances.editor;

            // Get the contents of the editor
            var contents = editor.getData();

            // Print the contents to the console
            console.log(contents);

            CKEDITOR.instances.editor.on('change', function() {
                submitbuttonremove();
            // do something when the content of the editor changes
            //console.log('Editor content changed');
            });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js" asp-append-version="true"></script>

</body>

